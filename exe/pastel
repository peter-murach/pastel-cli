#!/usr/bin/env ruby

Signal.trap("INT") { exit 1 }

require "pastel"
require "optparse"

# Return an unescaped version of delimiter
#
# @example
#   unescape("foo\\nbar") => "foo\nbar"
#
def unescape(str)
  escable = {
    '\n' => "\n",
    '\r' => "\r",
    '\t' => "\t",
    '\f' => "\f",
    '\v' => "\v"
  }
  str.gsub(/\\[nrtfv]/) { |m| escable[m] }
end

options = {}
config = { newline: true }

ARGV << "-h" if ARGV.empty?

parser = OptionParser.new do |opts|
  opts.banner = "Usage: pastel [options] style [style ...] [text]"

  opts.on("-d delim", "Specify character to use to split input coloring") do |val|
    val = val[1..-1] if val.start_with?("=")
    options[:eachline] = unescape(val)
  end

  opts.on("-f", "--force", "Force output coloring regardless of terminal support") do
    options[:enabled] = true
  end

  opts.on("-n", "Skip printing the trailing newline character") do
    config[:newline] = false
  end

  opts.on("-s", "--styles", "Print all available color and style names") do
    ops = (ARGV.include?("--force") || ARGV.include?("-f")) ? {enabled: true} : {}
    ops.merge!(options)
    pastel = Pastel.new(**ops)
    puts "Swatch    Name"
    pastel.styles.keys.each do |name|
      next if %i[clear reset].include?(name)
      puts "%s  %s" % [pastel.decorate("â—¼ pastel", name), name]
    end
    exit
  end

  opts.on("-h", "--help", "Print this message and exit") do
    puts opts
    exit
  end

  opts.on("-v", "--version", "Print version information and exit") do
    puts "0.4.0 (pastel #{Pastel::VERSION})"
    exit
  end
end

begin
  parser.parse!
rescue OptionParser::ParseError => error
  puts error.message
  exit 1
end

text = STDIN.tty? ? ARGV.pop : $stdin.read

pastel = Pastel.new(**options)

begin
  print pastel.decorate(text, *ARGV.map(&:to_sym)) + (config[:newline] ? "\n" : "")
rescue Pastel::InvalidAttributeNameError => error
  puts error.message
  exit 1
end
